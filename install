#!/bin/bash
# Arko's dotfiles install script

# Use this script to install or uninstall the dotfiles either locally (default) or remotely to the given user and host.

# Synopsis
# install [-f | -u]
# install -R [user@]host [-f | -u]

install_mode='install' # Default install mode

function show_usage () {
  echo "Usage: `basename $0` [options]"
  echo
  echo "    -f              Force install by backuping old files first"
  echo "    -h              Show this help"
  echo "    -R [user@]host  Do a remote install or uninstall"
  echo "    -u              Uninstall (backup) all files"
}

while getopts "fhR:u" Option
do
  case $Option in
    f ) force_install=1;;
    h ) show_usage; exit 0;;
    R ) remote_host=$OPTARG;;
    u ) install_mode='uninstall';;
    * ) show_usage; exit 1;;
  esac
done

# Force install / Backup files
function do_local_backup () {
  timestamp=$(date +%s)
  backup_dir=~/.dotfiles_bak_$timestamp
  echo "Backuping. Files will be moved to ${backup_dir}"
  
  # Create backup dir
  if [[ ! -d $backup_dir ]]; then
    echo "Creating ${backup_dir} directory"
    mkdir $backup_dir
    if [[ $? -gt 0 ]]; then
      exit_with_error "Error creating ${backup_dir} directory"
    fi
  fi
  
  # Backup .bashrc
  if [[ -e ~/.bashrc ]]; then
    echo 'Backuping ~/.bashrc'
    mv ~/.bashrc $backup_dir
    if [[ $? -gt 0 ]]; then
      exit_with_error "Error moving ~/.bashrc to ${backup_dir}"
    fi
  fi
  
  # Backup .bash_profile
  if [[ -e ~/.bash_profile ]]; then
    echo 'Backuping ~/.bash_profile'
    mv ~/.bash_profile $backup_dir
    if [[ $? -gt 0 ]]; then
      exit_with_error "Error moving ~/.bash_profile to ${backup_dir}"
    fi
  fi
  
  # Backup .dotfiles only if install is run from other directory
  if [[ $(pwd) != ~/.dotfiles && -d ~/.dotfiles ]]; then
    echo 'Backuping ~/.dotfiles'
    mv ~/.dotfiles $backup_dir
    if [[ $? -gt 0 ]]; then
      exit_with_error "Error moving ~/.dotfiles to ${backup_dir}"
    fi
  fi
}

# Pre-install check
function do_local_preflight () {
  echo 'Doing preflight check...'
  
  manifest=(~/.bashrc ~/.bash_profile)
  for file in ${manifest[@]}
  do
    if [[ -e $file ]]; then
      echo "${file} exists"
      preflight_failed=1
    fi
  done
  
  if [[ $(pwd) != ~/.dotfiles && -d ~/.dotfiles ]]; then
    # If the current directory is not ~/.dotfiles (Like it is when install is run from a tarball download),
    # and if the ~/.dotfiles directory already exists,
    # then we are likely in the case that the user has already run the install script once, or trying to update the dotfiles,
    # or has his own .dotfiles directory, or already cloned the git repository.
    echo ~/.dotfiles "already exists!"
    echo "This installer cannot do updates. Please use Git to stay up-to-date."
    echo "See readme.md for more information."
    preflight_failed=1
  fi
  
  if [[ $preflight_failed ]]; then
    echo 'Install aborted!'
    echo 'Use ./install -f to force install. Old files will be backuped.'
    return 1
  else
    return 0
  fi
}

# Local install
function do_local_install () {
    
  if [[ ! -d ~/.dotfiles ]]; then
    # If .dotfiles dir doesn't exists, we are likely running this script from a github tarball download.
    # So we need first to copy files from this "Arko-dotfiles-GITHASH" dir to the proper ~/.dotfiles dir
    echo "Creating ~/.dotfiles directory"
    mkdir ~/.dotfiles
    if [[ $? -gt 0 ]]; then
      exit_with_error 'Error creating ~/.dotfiles directory'
    fi
    echo "Copying files in ~/.dotfiles"
    cp -R * ~/.dotfiles
    if [[ $? -gt 0 ]]; then
      exit_with_error 'Error copying files in ~/.dotfiles directory'
    fi
  fi
  
  if [[ $(uname -p) == 'i386' ]]; then # Verify that arch is intel, then copy vcprompt. TODO: compile vcprompt for ppc
    if [[ ! -d ~/bin ]]; then
      echo "Creating ~/bin directory"
      mkdir ~/bin
      if [[ $? -gt 0 ]]; then
        exit_with_error 'Error creating ~/bin directory'
      fi
    fi
    if [[ -e ~/bin/vcprompt ]]; then
      echo 'Seems that vcprompt is already installed. Skipping'
    else
      echo 'Copying vcprompt binary to ~/bin'
      cp ~/.dotfiles/bin/vcprompt ~/bin/vcprompt
      if [[ $? -gt 0 ]]; then
        exit_with_error 'Error copying vcprompt binary'
      fi
    fi
  else
    echo "Arch is not i386. Skipping vcprompt install"
  fi
  
  echo 'Symlinking .bash_profile'
  ln -s ~/.dotfiles/bash_profile ~/.bash_profile
  if [[ $? -gt 0 ]]; then
    exit_with_error 'Error symlinking .bash_profile'
  fi
  
  echo 'Symlinking .bashrc'
  ln -s ~/.dotfiles/bashrc ~/.bashrc
  if [[ $? -gt 0 ]]; then
    exit_with_error 'Error symlinking .bashrc'
  fi
  
  echo 'Dotfiles installed successfully!'
  echo 'To load your new environment, use this command: $ source ~/.bashrc'
  echo 'Change prompt color with $ prompt_color'
}

function do_remote_install () {
  # TODO: copy files to remote host
  # TODO: run install script remotely (Should pass local prefilght in all cases)
  # TODO: See how we can make it with SSH Control Master
  echo "Not implemented yet"
}

function exit_with_error () {
  echo $1
  echo -e 'Install failed!'
  exit 1
}

# - - - - - - - - - - -

case $install_mode in
  'install' )
    if [[ $remote_host ]]; then
      # Remote install
      # if [[ $force_install -eq 1 ]]; then
      #   TODO: do_remote_backup
      # fi
      # TODO: do_remote_prefilght
      do_remote_install
    else
      # Local install
      if [[ $force_install -eq 1 ]]; then
        do_local_backup
      fi
      do_local_preflight
      if [[ $? -eq 0 ]]; then
        do_local_install
      fi
    fi
  ;;
  'uninstall' )
    if [[ $remote_host ]]; then
      # Remote uninstall
      do_remote_backup
    else
      # Local uninstall
      do_local_backup
    fi
  ;;
esac

exit 0
